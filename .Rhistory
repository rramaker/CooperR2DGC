}
#Parse metabolite spectra into a list
currentRawFileSplit<-split(currentRawFile,1:nrow(currentRawFile))
spectraSplit<-lapply(currentRawFileSplit, function(a) strsplit(a[[5]]," "))
spectraSplit<-lapply(spectraSplit, function(b) lapply(b, function(c) strsplit(c,":")))
spectraSplit<-lapply(spectraSplit, function(d) t(matrix(unlist(d),nrow=2)))
spectraSplit<-lapply(spectraSplit, function(d) d[which(!d[,1]%in%commonIons),])
spectraSplit<-lapply(spectraSplit, function(d) apply(d,2,as.numeric))
spectraSplit<-lapply(spectraSplit, function(d) d[order(d[,1]),2,drop=F])
return(list(currentRawFile,spectraSplit))
}
ImportedFiles<-mclapply(inputFileList, ImportFile, mc.cores=numCores)
#Create empty list for missing retention indices
MissingRTIndices<-list()
#Loop through each sample and check for missing indexes
for(Sample in ImportedFiles){
if(!is.null(RT1_Standards)){
#Check if all RT1 standards are present
if(sum(RT1_Standards%in%Sample[[1]][,1])!=length(RT1_Standards)){
MissingRTIndices[[File]]<-RT1_Standards[which(!RT1_Standards%in%Sample[[1]][,1])]
}
}
if(!is.null(RT2_Standards)){
#Check if all RT2 standards are present
if(sum(RT2_Standards%in%Sample[[1]][,1])!=length(RT2_Standards)){
MissingRTIndices[[File]]<-RT2_Standards[which(!RT2_Standards%in%Sample[[1]][,1])]
}
}
}
#Error if missing RT indices are present
if(length(MissingRTIndices)>0){
message("Error: Missing RT indices detected. See output list")
return(MissingRTIndices)
break
}
#Function to calculate pair wise similarity scores between all metabolite spectras
GenerateSimFrames<-function(Sample, SeedSample){
seedSpectraFrame<-do.call(cbind,SeedSample[[2]])
seedSpectraFrame<-t(seedSpectraFrame)
seedSpectraFrame<-as.matrix(seedSpectraFrame)/sqrt(apply((as.matrix(seedSpectraFrame))^2,1,sum))
sampleSpectraFrame<-do.call(cbind,Sample[[2]])
sampleSpectraFrame<-t(sampleSpectraFrame)
sampleSpectraFrame<-as.matrix(sampleSpectraFrame)/sqrt(apply((as.matrix(sampleSpectraFrame))^2,1,sum))
SimilarityMatrix<-(seedSpectraFrame %*% t(sampleSpectraFrame))*100
#Calculate pairwise RT penalties for each current file metabolite and seed file metabolites
RT1Index<-matrix(unlist(lapply(Sample[[1]][,"RT1"],function(x) abs(x-SeedSample[[1]][,"RT1"])*RT1Penalty)),nrow=nrow(SimilarityMatrix))
RT2Index<-matrix(unlist(lapply(Sample[[1]][,"RT2"],function(x) abs(x-SeedSample[[1]][,"RT2"])*RT2Penalty)),nrow=nrow(SimilarityMatrix))
#Use RT indices to calculate RT penalties if necessary
if(!is.null(RT1_Standards)){
#Compute list of metabolite to RT1 standard differences between current file and seed file for each metabolite
RT1Index<-list()
RT1_Length<-max(Sample[[1]][which(Sample[[1]][,1]%in%RT1_Standards),6])-min(Sample[[1]][which(Sample[[1]][,1]%in%RT1_Standards),6])
for(Standard in RT1_Standards){
RT1Index[[Standard]]<-matrix(unlist(lapply(Sample[[1]][,paste(Standard,"RT1",sep="_")],function(x) abs(x-SeedSample[[1]][,paste(Standard,"RT1",sep="_")])*(RT1Penalty/length(RT1_Standards)))),nrow=nrow(SimilarityMatrix))*RT1_Length
}
#Sum all relative standard differences into a final score
RT1Index<-Reduce("+",RT1Index)
}
if(!is.null(RT2_Standards)){
#Compute list of metabolite to RT2 standard differences between current file and seed file for each metabolite
RT2Index<-list()
RT2_Length<-max(Sample[[1]][which(Sample[[1]][,1]%in%RT2_Standards),6])-min(Sample[[1]][which(Sample[[1]][,1]%in%RT2_Standards),6])
for(Standard in RT2_Standards){
RT2Index[[Standard]]<-matrix(unlist(lapply(Sample[[1]][,paste(Standard,"RT2",sep="_")],function(x) abs(x-SeedSample[[1]][,paste(Standard,"RT2",sep="_")])*(RT2Penalty/length(RT2_Standards)))),nrow=nrow(SimilarityMatrix))*RT2_Length
}
#Sum all relative standard differences into a final score
RT2Index<-Reduce("+",RT2Index)
}
return(SimilarityMatrix-RT1Index-RT2Index)
}
AlignmentTableList<-list()
for(seed in seedFile){
message(paste0("seed is ",seed))
SeedSample<- ImportedFiles[[seed]]
#Calculate pairwise similarity scores
SimCutoffs<-mclapply(ImportedFiles[-seed], function(x) GenerateSimFrames(x, SeedSample), mc.cores=numCores)
names(SimCutoffs)<-as.character(1:length(ImportedFiles))[-seed]
#Calculate optimal similarity score cutoff if desired
if(autoTuneMatchStringency==TRUE){
SimScores<-mclapply(SimCutoffs, function(y) unlist(lapply(1:100,function(x) sum(rowSums(y>x)>0)/(sum(y>x)^0.5))),mc.cores = numCores)
SimScores<-matrix(unlist(SimScores),ncol=length(SimScores))
similarityCutoff<-which.max(rowSums(SimScores))
disimilarityCutoff<-similarityCutoff-90
}
#Find Metabolites to add to seed file
for(SampNum in (1:length(ImportedFiles))[-seed]){
#Find best matches and mate pairs for each metabolite and remove inferior matches if metabolite is matched twice
MatchScores<-apply(SimCutoffs[[as.character(SampNum)]],2,function(x) max(x,na.rm=T))
Mates<-apply(SimCutoffs[[as.character(SampNum)]],2,function(x) which.max(x))
names(MatchScores)<-1:length(MatchScores)
names(Mates)<-1:length(Mates)
Mates<-Mates[order(-MatchScores)]
MatchScores<-MatchScores[order(-MatchScores)]
MatchScores[which(duplicated(Mates))]<-NA
Mates<-Mates[order(as.numeric(names(Mates)))]
MatchScores<-MatchScores[order(as.numeric(names(MatchScores)))]
#Find metabolites in current file sufficiently dissimilar to add to alignment matrix
SeedSample[[1]]<-rbind(SeedSample[[1]],ImportedFiles[[SampNum]][[1]][which(MatchScores<disimilarityCutoff),])
if(length(which(MatchScores<disimilarityCutoff))>0){
SeedSample[[2]][as.character((length(SeedSample[[2]])+1):(length(SeedSample[[2]])+length(which(MatchScores<disimilarityCutoff))))]<- ImportedFiles[[SampNum]][[2]][which(MatchScores<disimilarityCutoff)]
}
}
#Repeat pairwise similarity score calculation on full seed sample file
SimCutoffs<-mclapply(ImportedFiles, function(x) GenerateSimFrames(x, SeedSample), mc.cores=numCores)
#Calculate optimal similarity score cutoff if desired
if(autoTuneMatchStringency==TRUE){
message("Computing peak similarity threshold")
SimScores<-mclapply(SimCutoffs[-seed], function(y) unlist(lapply(1:100,function(x) sum(rowSums(y>x)>0)/(sum(y>x)^0.5))),mc.cores = numCores)
SimScores<-matrix(unlist(SimScores),ncol=length(SimScores))
similarityCutoff<-which.max(rowSums(SimScores))
disimilarityCutoff<-similarityCutoff-90
}
#Establish alignment matrix
FinalMatrix<-matrix(nrow=nrow(SeedSample[[1]]),ncol=length(inputFileList))
row.names(FinalMatrix)<-SeedSample[[1]][,1]
colnames(FinalMatrix)<-inputFileList
#Establish emptly list to store incongruent quant matches if using quantMethod "U" or "A"
MissingQMList<-list()
#Loop back through input files and find matches above similarityCutoff threshold
for(SampNum in 1:length(ImportedFiles)){
#Find best seed sample match scores
MatchScores<-apply(SimCutoffs[[SampNum]],2,function(x) max(x,na.rm=T))
#Find current sample metabolites with best match
Mates<-apply(SimCutoffs[[SampNum]],2,function(x) which.max(x))
names(MatchScores)<-1:length(MatchScores)
names(Mates)<-1:length(Mates)
Mates<-Mates[order(-MatchScores)]
MatchScores<-MatchScores[order(-MatchScores)]
MatchScores[which(duplicated(Mates))]<-NA
Mates<-Mates[order(as.numeric(names(Mates)))]
MatchScores<-MatchScores[order(as.numeric(names(MatchScores)))]
if(quantMethod=="U"){
#Find quant masses for each match pair
MatchedSeedQMs<- SeedSample[[1]][,4][Mates[which(MatchScores>=similarityCutoff)]]
currentFileQMs<- ImportedFiles[[SampNum]][[1]][which(MatchScores>=similarityCutoff),4]
#Add incongruent quant mass info to MissingQMList for output
MissingQMList[[inputFileList[SampNum]]]<-cbind(inputFileList[SampNum],which(MatchScores>=similarityCutoff),currentFileQMs,inputFileList[seed],Mates[which(MatchScores>=similarityCutoff)],MatchedSeedQMs)[which(currentFileQMs!=MatchedSeedQMs),]
#Convert areas proportionally for incongruent quant masses
currentFileAreas<- ImportedFiles[[SampNum]][[1]][which(MatchScores>=similarityCutoff),3]
currentFileSpectra<- ImportedFiles[[SampNum]][[2]][which(MatchScores>=similarityCutoff)]
MatchedSeedSpectra<- SeedSample[[2]][Mates[which(MatchScores>=similarityCutoff)]]
ConvNumerator<-unlist(lapply(1:length(currentFileQMs), function(x) currentFileSpectra[[x]][which(currentFileSpectra[[x]][,1]==currentFileQMs[x]),2]))
ConvDenominator<-unlist(lapply(1:length(currentFileQMs), function(x) currentFileSpectra[[x]][which(currentFileSpectra[[x]][,1]==MatchedSeedQMs[x]),2]))
ConvDenominator[which(ConvDenominator==0)]<-NA
#Add matched peaks to final alignment matrix
FinalMatrix[Mates[which(MatchScores>=similarityCutoff)],inputFileList[SampNum]]<-currentFileAreas*(ConvNumerator/ConvDenominator)
}
if(quantMethod=="A"){
#Make function to parse apexing masses and test whether 50% are in common with seed file
TestQMOverlap<-function(x){
SeedQMs<- strsplit(x[1],"\\+")
FileQMs<- strsplit(x[2],"\\+")
sum(unlist(SeedQMs)%in%unlist(FileQMs))/min(length(unlist(SeedQMs)),length(unlist(FileQMs)))<0.5
}
#Test apexing mass overlap for each metabolite match
MatchedSeedQMs<- SeedSample[[1]][,4][Mates[which(MatchScores>=similarityCutoff)]]
currentFileQMs<- ImportedFiles[[SampNum]][[1]][which(MatchScores>=similarityCutoff),4]
QM_Bind<-cbind(MatchedSeedQMs,currentFileQMs)
QM_Match<-apply(QM_Bind, 1, function(x) TestQMOverlap(x))
#Add incongruent apexing masses to MissingQMList for output
MissingQMList[[inputFileList[SampNum]]]<-cbind(inputFileList[SampNum],which(MatchScores>=similarityCutoff),currentFileQMs,inputFileList[seed],Mates[which(MatchScores>=similarityCutoff)],MatchedSeedQMs)[which(QM_Match==TRUE),]
#Add matched peaks to final alignment matrix
FinalMatrix[Mates[which(MatchScores>=similarityCutoff)],inputFileList[SampNum]]<-ImportedFiles[[SampNum]][[1]][which(MatchScores>=similarityCutoff),3]
}
if(quantMethod=="T"){
#Add newly aligned peaks to alignment matrix
FinalMatrix[Mates[which(MatchScores>=similarityCutoff)],inputFileList[SampNum]]<-ImportedFiles[[SampNum]][[1]][which(MatchScores>=similarityCutoff),3]
}
}
#Filter final alignment matrix to only peaks passing the missing value limit
SeedSample[[1]]<-SeedSample[[1]][which(rowSums(is.na(FinalMatrix))<=round(length(inputFileList)*(1-missingValueLimit))),]
SeedSample[[2]]<-SeedSample[[2]][which(rowSums(is.na(FinalMatrix))<=round(length(inputFileList)*(1-missingValueLimit)))]
FinalMatrix<-FinalMatrix[which(rowSums(is.na(FinalMatrix))<=round(length(inputFileList)*(1-missingValueLimit))),]
#Compute relaxed similarity cutoff with missingPeakFinderSimilarityLax
similarityCutoff<-similarityCutoff*missingPeakFinderSimilarityLax
message("Searching for missing peaks")
#Loop through each file again and check for matches in high probability missing metabolites meeting relaxed similarity cutoff
SimCutoffs<-mclapply(ImportedFiles, function(x) GenerateSimFrames(x, SeedSample), mc.cores=numCores)
#Find peaks with missing values
for(SampNum in 1:length(ImportedFiles)){
MissingPeaks<-which(is.na(FinalMatrix[,inputFileList[SampNum]]))
if(length(MissingPeaks)>0){
MatchScores<-apply(SimCutoffs[[SampNum]],2,function(x) max(x,na.rm=T))
Mates<-apply(SimCutoffs[[SampNum]],2,function(x) which.max(x))
names(MatchScores)<-1:length(MatchScores)
names(Mates)<-1:length(Mates)
Mates<-Mates[order(-MatchScores)]
MatchScores<-MatchScores[order(-MatchScores)]
MatchScores[which(duplicated(Mates))]<-NA
Mates<-Mates[order(as.numeric(names(Mates)))]
MatchScores<-MatchScores[order(as.numeric(names(MatchScores)))]
MatchScores<-MatchScores[which(Mates%in%MissingPeaks)]
Mates<-Mates[which(Mates%in%MissingPeaks)]
#If matches are greater than relaxed simlarity cutoff add to final alignment table
if(length(which(MatchScores>=similarityCutoff))>0){
if(quantMethod=="U"){
#Find quant masses for each match pair
MatchedSeedQMs<- SeedSample[[1]][,4][Mates[which(MatchScores>=similarityCutoff)]]
currentFileQMs<- ImportedFiles[[SampNum]][[1]][which(MatchScores>=similarityCutoff),4]
#Add incongruent quant mass info to MissingQMList for output
MissingQMList[[paste0(inputFileList[SampNum],"_MPF")]]<-cbind(inputFileList[SampNum],which(MatchScores>=similarityCutoff),currentFileQMs,inputFileList[seed],Mates[which(MatchScores>=similarityCutoff)],MatchedSeedQMs)[which(currentFileQMs!=MatchedSeedQMs),]
#Convert areas proportionally for incongruent quant masses
currentFileAreas<- ImportedFiles[[SampNum]][[1]][names(which(MatchScores>=similarityCutoff)),3]
currentFileSpectra<- ImportedFiles[[SampNum]][[2]][names(which(MatchScores>=similarityCutoff))]
MatchedSeedSpectra<- SeedSample[[2]][Mates[which(MatchScores>=similarityCutoff)]]
ConvNumerator<-unlist(lapply(1:length(currentFileQMs), function(x) currentFileSpectra[[x]][which(currentFileSpectra[[x]][,1]==currentFileQMs[x]),2]))
ConvDenominator<-unlist(lapply(1:length(currentFileQMs), function(x) currentFileSpectra[[x]][which(currentFileSpectra[[x]][,1]==MatchedSeedQMs[x]),2]))
ConvDenominator[which(ConvDenominator==0)]<-NA
#Add matched peaks to final alignment matrix
FinalMatrix[Mates[which(MatchScores>=similarityCutoff)],inputFileList[SampNum]]<-currentFileAreas*(ConvNumerator/ConvDenominator)
}
if(quantMethod=="A"){
#Make function to parse apexing masses and test whether 50% are in common with seed file
TestQMOverlap<-function(x){
SeedQMs<- strsplit(x[1],"\\+")
FileQMs<- strsplit(x[2],"\\+")
return(sum(unlist(SeedQMs)%in%unlist(FileQMs))/min(length(unlist(SeedQMs)),length(unlist(FileQMs)))<0.5)
}
#Test apexing mass overlap for each metabolite match
MatchedSeedQMs<- SeedSample[[1]][,4][Mates[which(MatchScores>=similarityCutoff)]]
currentFileQMs<- ImportedFiles[[SampNum]][[1]][which(MatchScores>=similarityCutoff),4]
QM_Bind<-cbind(MatchedSeedQMs,currentFileQMs)
QM_Match<-apply(QM_Bind, 1, function(x) TestQMOverlap(x))
#Add incongruent apexing masses to MissingQMList for output
MissingQMList[[paste0(inputFileList[SampNum],"_MPF")]]<-cbind(inputFileList[SampNum],which(MatchScores>=similarityCutoff),currentFileQMs,inputFileList[seed],Mates[which(MatchScores>=similarityCutoff)],MatchedSeedQMs)[which(currentFileQMs!=MatchedSeedQMs),]
#Add matched peaks to final alignment matrix
FinalMatrix[Mates[which(MatchScores>=similarityCutoff)],inputFileList[SampNum]]<-ImportedFiles[[SampNum]][[1]][names(which(MatchScores>=similarityCutoff)),3]
}
if(quantMethod=="T"){
#Add matched peaks to final alignment matrix
FinalMatrix[Mates[which(MatchScores>=similarityCutoff)],inputFileList[SampNum]]<-ImportedFiles[[SampNum]][[1]][names(which(MatchScores>=similarityCutoff)),3]
}
}
}
}
#Make MissingQMList into dataframe for output
MissingQMFrame<-do.call(rbind,MissingQMList)
AlignmentTableList[[as.character(seed)]]<-FinalMatrix
}
Alignment<-ConsensusAlign(inputFileList = paste0(QuickStart_FolderPath,list.files(QuickStart_FolderPath)[grep("_Processed.txt_FAME",list.files(QuickStart_FolderPath))]), numCores = 8,standardLibrary = StandardLibrary_030117,RT1_Standards = paste("FAME_", seq(8,24,2), sep=""),commonIons = ProblemIons[,1])
library(CooperR2DGC)
QuickStart_FolderPath<-"/Volumes/SCOOPER/E_Gordon_U104/"
install.packages("devtools")
library("devtools")
install_github("rramaker/CooperR2DGC")
library(CooperR2DGC)
ProblemIons<-FindProblemIons(inputFile = "/Volumes/EGORDON/u104/170419_C1_split15_1.txt", numCores = 8)
ProblemIons<-FindProblemIons(inputFile = "/Volumes/SCOOPER/u104/170419_C1_split15_1.txt", numCores = 8)
ProblemIons<-FindProblemIons(inputFile = "/Volumes/SCOOPER/E_Gordon_U104/u104/170419_C1_split15_1.txt", numCores = 8)
View(ProblemIons)
PeaksToCompress<-PrecompressFiles(inputFileList=paste0("/Volumes/EGORDON/u104/",list.files("/Volumes/EGORDON/u104/")), numCores=8, outputFiles=T, similarityCutoff = 65, commonIons = ProblemIons[,1])
paste0("/Volumes/SCOOPER/E_Gordon_U104/u104/",list.files("/Volumes/SCOOPER/E_Gordon_U104/u104/"))
PeaksToCompress<-PrecompressFiles(inputFileList=paste0("/Volumes/SCOOPER/E_Gordon_U104/u104/",list.files("/Volumes/SCOOPER/E_Gordon_U104/u104/")), numCores=8, outputFiles=T, similarityCutoff = 65, commonIons = ProblemIons[,1])
Find_FAME_Standards(inputFileList = paste0("/Volumes/SCOOPER/E_Gordon_U104/u104/",list.files("/Volumes/SCOOPER/E_Gordon_U104/u104/"))[grep("_Processed",list.files("/Volumes/SCOOPER/E_Gordon_U104/u104/"))], numCores = 4)
Alignment<-ConsensusAlign(inputFileList = paste0("/Volumes/EGORDON/u104/",list.files("/Volumes/EGORDON/u104/"))[grep("_Processed_FAME_appended",list.files("/Volumes/EGORDON/u104/"))], numCores = 8,missingValueLimit=0, standardLibrary = StandardLibrary,RT1_Standards = paste("FAME_", seq(8,24,2), sep=""),commonIons = ProblemIons[,1],seedFile = 17)
list.files("/Volumes/SCOOPER/E_Gordon_U104/Fame_Appended_Standards/")
StandardLibrary<-MakeReference(inputFileList = paste0("/Volumes/SCOOPER/E_Gordon_U104/Fame_Appended_Standards/",list.files("/Volumes/SCOOPER/E_Gordon_U104/Fame_Appended_Standards/")), RT1_Standards =paste("FAME_", seq(8,24,2), sep=""))
Alignment<-ConsensusAlign(inputFileList = paste0("/Volumes/SCOOPER/E_Gordon_U104/u104/",list.files("/Volumes/SCOOPER/E_Gordon_U104/u104/"))[grep("_Processed_FAME_appended",list.files("/Volumes/SCOOPER/E_Gordon_U104/u104/"))], numCores = 8,missingValueLimit=0, standardLibrary = StandardLibrary,RT1_Standards = paste("FAME_", seq(8,24,2), sep=""),commonIons = ProblemIons[,1],seedFile = 17)
missingValueLimit=0
numCores = 8
standardLibrary = StandardLibrary
RT1_Standards = paste("FAME_", seq(8,24,2), sep="")
seedFile = 17
commonIons = ProblemIons[,1]
inputFileList = paste0("/Volumes/SCOOPER/E_Gordon_U104/u104/",list.files("/Volumes/SCOOPER/E_Gordon_U104/u104/"))[grep("_Processed_FAME_appended",list.files("/Volumes/SCOOPER/E_Gordon_U104/u104/"))]
RT1Penalty=1
RT2Penalty=10
autoTuneMatchStringency=TRUE
similarityCutoff=90
disimilarityCutoff=similarityCutoff-90
missingPeakFinderSimilarityLax=0.85
quantMethod="T"
ImportFile<-function(File){
#Read in file
currentRawFile<-read.table(File, sep="\t", fill=T, quote="",strip.white = T, stringsAsFactors = F,header=T)
currentRawFile[,5]<-as.character(currentRawFile[,5])
currentRawFile<-currentRawFile[which(!is.na(currentRawFile[,3])&nchar(currentRawFile[,5])!=0),]
currentRawFile[,2]<-as.character(currentRawFile[,2])
#Parse retention times
RTSplit<-data.frame(strsplit(currentRawFile[,2], " , "), stringsAsFactors = F)
RTSplit[1,]<-gsub("\"", "", RTSplit[1,])
RTSplit[2,]<-gsub("\"", "", RTSplit[2,])
currentRawFile[,"RT1"]<-as.numeric(t(RTSplit[1,]))
currentRawFile[,"RT2"]<-as.numeric(t(RTSplit[2,]))
#Remove identical metabolite rows
uniqueIndex<-data.frame(paste(currentRawFile[,1], currentRawFile[,2], currentRawFile[,3]))
currentRawFile<-currentRawFile[which(!duplicated(uniqueIndex)),]
row.names(currentRawFile)<-c(1:nrow(currentRawFile))
#Index metabolites by RT1 Standards
if(!is.null(RT1_Standards)){
#Check if all RT1 standards are present in each file
if(sum(RT1_Standards%in%currentRawFile[,1])!=length(RT1_Standards)){
message(paste("Seed file missing RT1 standards:",RT1_Standards[which(!RT1_Standards%in%currentRawFile[,1])],sep=" "))
break
}
#Index each metabolite by RT1 Standards
RT1_Length<-max(currentRawFile[which(currentRawFile[,1]%in%RT1_Standards),6])-min(currentRawFile[which(currentRawFile[,1]%in%RT1_Standards),6])
for(Standard in RT1_Standards){
currentRawFile[,paste(Standard,"RT1",sep="_")]<-(currentRawFile[,6]-currentRawFile[grep(Standard,currentRawFile[,1],perl = T),6])/RT1_Length
}
}
#Index metabolites by RT2 Standards
if(!is.null(RT2_Standards)){
#Check if all RT2_Standards are present
if(sum(RT2_Standards%in%currentRawFile[,1])!=length(RT2_Standards)){
message(paste("Seed file missing RT2 standards:",RT2_Standards[which(!RT2_Standards%in%currentRawFile[,1])],sep=" "))
break
}
#Index each metabolite by RT2 standards
RT2_Length<-max(currentRawFile[which(currentRawFile[,1]%in%RT2_Standards),6])-min(currentRawFile[which(currentRawFile[,1]%in%RT2_Standards),6])
for(Standard in RT2_Standards){
currentRawFile[,paste(Standard,"RT2",sep="_")]<-(currentRawFile[,6]-currentRawFile[grep(Standard,currentRawFile[,1],perl = T),6])/RT2_Length
}
}
#Parse metabolite spectra into a list
currentRawFileSplit<-split(currentRawFile,1:nrow(currentRawFile))
spectraSplit<-lapply(currentRawFileSplit, function(a) strsplit(a[[5]]," "))
spectraSplit<-lapply(spectraSplit, function(b) lapply(b, function(c) strsplit(c,":")))
spectraSplit<-lapply(spectraSplit, function(d) t(matrix(unlist(d),nrow=2)))
spectraSplit<-lapply(spectraSplit, function(d) d[which(!d[,1]%in%commonIons),])
spectraSplit<-lapply(spectraSplit, function(d) apply(d,2,as.numeric))
spectraSplit<-lapply(spectraSplit, function(d) d[order(d[,1]),2,drop=F])
return(list(currentRawFile,spectraSplit))
}
ImportedFiles<-mclapply(inputFileList, ImportFile, mc.cores=numCores)
library(mclapply)
library(parallel)
ImportFile<-function(File){
#Read in file
currentRawFile<-read.table(File, sep="\t", fill=T, quote="",strip.white = T, stringsAsFactors = F,header=T)
currentRawFile[,5]<-as.character(currentRawFile[,5])
currentRawFile<-currentRawFile[which(!is.na(currentRawFile[,3])&nchar(currentRawFile[,5])!=0),]
currentRawFile[,2]<-as.character(currentRawFile[,2])
#Parse retention times
RTSplit<-data.frame(strsplit(currentRawFile[,2], " , "), stringsAsFactors = F)
RTSplit[1,]<-gsub("\"", "", RTSplit[1,])
RTSplit[2,]<-gsub("\"", "", RTSplit[2,])
currentRawFile[,"RT1"]<-as.numeric(t(RTSplit[1,]))
currentRawFile[,"RT2"]<-as.numeric(t(RTSplit[2,]))
#Remove identical metabolite rows
uniqueIndex<-data.frame(paste(currentRawFile[,1], currentRawFile[,2], currentRawFile[,3]))
currentRawFile<-currentRawFile[which(!duplicated(uniqueIndex)),]
row.names(currentRawFile)<-c(1:nrow(currentRawFile))
#Index metabolites by RT1 Standards
if(!is.null(RT1_Standards)){
#Check if all RT1 standards are present in each file
if(sum(RT1_Standards%in%currentRawFile[,1])!=length(RT1_Standards)){
message(paste("Seed file missing RT1 standards:",RT1_Standards[which(!RT1_Standards%in%currentRawFile[,1])],sep=" "))
break
}
#Index each metabolite by RT1 Standards
RT1_Length<-max(currentRawFile[which(currentRawFile[,1]%in%RT1_Standards),6])-min(currentRawFile[which(currentRawFile[,1]%in%RT1_Standards),6])
for(Standard in RT1_Standards){
currentRawFile[,paste(Standard,"RT1",sep="_")]<-(currentRawFile[,6]-currentRawFile[grep(Standard,currentRawFile[,1],perl = T),6])/RT1_Length
}
}
#Index metabolites by RT2 Standards
if(!is.null(RT2_Standards)){
#Check if all RT2_Standards are present
if(sum(RT2_Standards%in%currentRawFile[,1])!=length(RT2_Standards)){
message(paste("Seed file missing RT2 standards:",RT2_Standards[which(!RT2_Standards%in%currentRawFile[,1])],sep=" "))
break
}
#Index each metabolite by RT2 standards
RT2_Length<-max(currentRawFile[which(currentRawFile[,1]%in%RT2_Standards),6])-min(currentRawFile[which(currentRawFile[,1]%in%RT2_Standards),6])
for(Standard in RT2_Standards){
currentRawFile[,paste(Standard,"RT2",sep="_")]<-(currentRawFile[,6]-currentRawFile[grep(Standard,currentRawFile[,1],perl = T),6])/RT2_Length
}
}
#Parse metabolite spectra into a list
currentRawFileSplit<-split(currentRawFile,1:nrow(currentRawFile))
spectraSplit<-lapply(currentRawFileSplit, function(a) strsplit(a[[5]]," "))
spectraSplit<-lapply(spectraSplit, function(b) lapply(b, function(c) strsplit(c,":")))
spectraSplit<-lapply(spectraSplit, function(d) t(matrix(unlist(d),nrow=2)))
spectraSplit<-lapply(spectraSplit, function(d) d[which(!d[,1]%in%commonIons),])
spectraSplit<-lapply(spectraSplit, function(d) apply(d,2,as.numeric))
spectraSplit<-lapply(spectraSplit, function(d) d[order(d[,1]),2,drop=F])
return(list(currentRawFile,spectraSplit))
}
ImportedFiles<-mclapply(inputFileList, ImportFile, mc.cores=numCores)
inputFileList
numCores
ImportedFiles<-mclapply(inputFileList, ImportFile, mc.cores=numCores)
ImportFile(inputFileList[1])
RT2_Standards=NULL
ImportedFiles<-mclapply(inputFileList, ImportFile, mc.cores=numCores)
GenerateSimFrames<-function(Sample, SeedSample){
seedSpectraFrame<-do.call(cbind,SeedSample[[2]])
seedSpectraFrame<-t(seedSpectraFrame)
seedSpectraFrame<-as.matrix(seedSpectraFrame)/sqrt(apply((as.matrix(seedSpectraFrame))^2,1,sum))
sampleSpectraFrame<-do.call(cbind,Sample[[2]])
sampleSpectraFrame<-t(sampleSpectraFrame)
sampleSpectraFrame<-as.matrix(sampleSpectraFrame)/sqrt(apply((as.matrix(sampleSpectraFrame))^2,1,sum))
SimilarityMatrix<-(seedSpectraFrame %*% t(sampleSpectraFrame))*100
#Calculate pairwise RT penalties for each current file metabolite and seed file metabolites
RT1Index<-matrix(unlist(lapply(Sample[[1]][,"RT1"],function(x) abs(x-SeedSample[[1]][,"RT1"])*RT1Penalty)),nrow=nrow(SimilarityMatrix))
RT2Index<-matrix(unlist(lapply(Sample[[1]][,"RT2"],function(x) abs(x-SeedSample[[1]][,"RT2"])*RT2Penalty)),nrow=nrow(SimilarityMatrix))
#Use RT indices to calculate RT penalties if necessary
if(!is.null(RT1_Standards)){
#Compute list of metabolite to RT1 standard differences between current file and seed file for each metabolite
RT1Index<-list()
RT1_Length<-max(Sample[[1]][which(Sample[[1]][,1]%in%RT1_Standards),6])-min(Sample[[1]][which(Sample[[1]][,1]%in%RT1_Standards),6])
for(Standard in RT1_Standards){
RT1Index[[Standard]]<-matrix(unlist(lapply(Sample[[1]][,paste(Standard,"RT1",sep="_")],function(x) abs(x-SeedSample[[1]][,paste(Standard,"RT1",sep="_")])*(RT1Penalty/length(RT1_Standards)))),nrow=nrow(SimilarityMatrix))*RT1_Length
}
#Sum all relative standard differences into a final score
RT1Index<-Reduce("+",RT1Index)
}
if(!is.null(RT2_Standards)){
#Compute list of metabolite to RT2 standard differences between current file and seed file for each metabolite
RT2Index<-list()
RT2_Length<-max(Sample[[1]][which(Sample[[1]][,1]%in%RT2_Standards),6])-min(Sample[[1]][which(Sample[[1]][,1]%in%RT2_Standards),6])
for(Standard in RT2_Standards){
RT2Index[[Standard]]<-matrix(unlist(lapply(Sample[[1]][,paste(Standard,"RT2",sep="_")],function(x) abs(x-SeedSample[[1]][,paste(Standard,"RT2",sep="_")])*(RT2Penalty/length(RT2_Standards)))),nrow=nrow(SimilarityMatrix))*RT2_Length
}
#Sum all relative standard differences into a final score
RT2Index<-Reduce("+",RT2Index)
}
return(SimilarityMatrix-RT1Index-RT2Index)
}
AlignmentTableList<-list()
message(paste0("seed is ",seed))
seed<-17
message(paste0("seed is ",seed))
SeedSample<- ImportedFiles[[seed]]
SimCutoffs<-mclapply(ImportedFiles[-seed], function(x) GenerateSimFrames(x, SeedSample), mc.cores=numCores)
names(SimCutoffs)<-as.character(1:length(ImportedFiles))[-seed]
if(autoTuneMatchStringency==TRUE){
SimScores<-mclapply(SimCutoffs, function(y) unlist(lapply(1:100,function(x) sum(rowSums(y>x)>0)/(sum(y>x)^0.5))),mc.cores = numCores)
SimScores<-matrix(unlist(SimScores),ncol=length(SimScores))
similarityCutoff<-which.max(rowSums(SimScores))
disimilarityCutoff<-similarityCutoff-90
}
SimCutoffs
SimCutoffs[1]
SimScores<-mclapply(SimCutoffs, function(y) unlist(lapply(1:100,function(x) sum(rowSums(y>x)>0)/(sum(y>x)^0.5))),mc.cores = numCores)
SimScores<-matrix(unlist(SimScores),ncol=length(SimScores))
rowSums(SimScores)
SimScores
ImportedFiles[-seed]
inputFileList
SeedSample<- ImportedFiles[[seed]]
SimCutoffs[25]
SimCutoffs[24]
SimCutoffs[26]
SimScores
x=1
y=SimCutoffs[25]
unlist(lapply(1:100,function(x) sum(rowSums(y>x)>0)/(sum(y>x)^0.5)))
unlist(lapply(1:100,function(x) sum(rowSums(y>x)>0)/(sum(y>x)^0.5)))
SimCutoffs[[25]]
y=SimCutoffs[[25]]
unlist(lapply(1:100,function(x) sum(rowSums(y>x)>0)/(sum(y>x)^0.5)))
View(y)
seedSpectraFrame<-do.call(cbind,SeedSample[[2]])
seedSpectraFrame<-t(seedSpectraFrame)
seedSpectraFrame<-as.matrix(seedSpectraFrame)/sqrt(apply((as.matrix(seedSpectraFrame))^2,1,sum))
sampleSpectraFrame<-do.call(cbind,Sample[[2]])
ImportedFiles[25]
Sample<-ImportedFiles[25]
sampleSpectraFrame<-do.call(cbind,Sample[[2]])
sampleSpectraFrame<-t(sampleSpectraFrame)
Sample<-ImportedFiles[[25]]
sampleSpectraFrame<-do.call(cbind,Sample[[2]])
sampleSpectraFrame<-t(sampleSpectraFrame)
sampleSpectraFrame<-as.matrix(sampleSpectraFrame)/sqrt(apply((as.matrix(sampleSpectraFrame))^2,1,sum))
SimilarityMatrix<-(seedSpectraFrame %*% t(sampleSpectraFrame))*100
View(SimilarityMatrix)
RT1Index<-matrix(unlist(lapply(Sample[[1]][,"RT1"],function(x) abs(x-SeedSample[[1]][,"RT1"])*RT1Penalty)),nrow=nrow(SimilarityMatrix))
RT2Index<-matrix(unlist(lapply(Sample[[1]][,"RT2"],function(x) abs(x-SeedSample[[1]][,"RT2"])*RT2Penalty)),nrow=nrow(SimilarityMatrix))
if(!is.null(RT1_Standards)){
#Compute list of metabolite to RT1 standard differences between current file and seed file for each metabolite
RT1Index<-list()
RT1_Length<-max(Sample[[1]][which(Sample[[1]][,1]%in%RT1_Standards),6])-min(Sample[[1]][which(Sample[[1]][,1]%in%RT1_Standards),6])
for(Standard in RT1_Standards){
RT1Index[[Standard]]<-matrix(unlist(lapply(Sample[[1]][,paste(Standard,"RT1",sep="_")],function(x) abs(x-SeedSample[[1]][,paste(Standard,"RT1",sep="_")])*(RT1Penalty/length(RT1_Standards)))),nrow=nrow(SimilarityMatrix))*RT1_Length
}
#Sum all relative standard differences into a final score
RT1Index<-Reduce("+",RT1Index)
}
if(!is.null(RT2_Standards)){
#Compute list of metabolite to RT2 standard differences between current file and seed file for each metabolite
RT2Index<-list()
RT2_Length<-max(Sample[[1]][which(Sample[[1]][,1]%in%RT2_Standards),6])-min(Sample[[1]][which(Sample[[1]][,1]%in%RT2_Standards),6])
for(Standard in RT2_Standards){
RT2Index[[Standard]]<-matrix(unlist(lapply(Sample[[1]][,paste(Standard,"RT2",sep="_")],function(x) abs(x-SeedSample[[1]][,paste(Standard,"RT2",sep="_")])*(RT2Penalty/length(RT2_Standards)))),nrow=nrow(SimilarityMatrix))*RT2_Length
}
#Sum all relative standard differences into a final score
RT2Index<-Reduce("+",RT2Index)
}
z<-SimilarityMatrix-RT1Index-RT2Index
View(z)
Sample<-ImportedFiles[-seed][[25]]
seedSpectraFrame<-do.call(cbind,SeedSample[[2]])
seedSpectraFrame<-t(seedSpectraFrame)
seedSpectraFrame<-as.matrix(seedSpectraFrame)/sqrt(apply((as.matrix(seedSpectraFrame))^2,1,sum))
sampleSpectraFrame<-do.call(cbind,Sample[[2]])
sampleSpectraFrame<-t(sampleSpectraFrame)
sampleSpectraFrame<-as.matrix(sampleSpectraFrame)/sqrt(apply((as.matrix(sampleSpectraFrame))^2,1,sum))
SimilarityMatrix<-(seedSpectraFrame %*% t(sampleSpectraFrame))*100
View(SimilarityMatrix)
View(seedSpectraFrame)
View(sampleSpectraFrame)
nrow(sampleSpectraFrame)
ncol(sampleSpectraFrame)
inputFileList[-seed][25]
sampleSpectraFrame<-do.call(cbind,Sample[[2]])
View(sampleSpectraFrame)
Sample[[2]]
Sample[[2]][11]
lapply(Sample[[2]], sum)
lapply(Sample[[2]], sum)[11]
